<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>classpath:spring-persist-*.xml</param-value>-->
<!--    </context-param>-->
<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--设置字符集-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求设置字符集-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应设置字符集-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这个Filter执行的顺序要在所有其他的Filter前面-->
    <!--
        原因:
            1.request.setCharacterEncoding(encoding)要在request.getParam()前面
            2.response.setCharacterEncoding(encoding)要在response.getWriter()前面
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <!--DispatchServlet创建对象后有大量“框架初始化”工作，不适合在第一次请求时才创建对象-->
        <!--设置load-on-startup就是为了让DispatchServlet在web应用启动时创建对象，初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <!--url-pattern配置方式1：/表示拦截所有请求-->
<!--        <url-pattern>/</url-pattern>-->
        <!--rl-pattern配置方式2：配置请求扩展名-->
        <!--优点1：静态资源(.css,.js,.png)完全不经过SpringMVC，不需要特殊处理-->
        <!--优点2：可以实现伪静态效果，表面上看起来是访问一个HTML文件这样的静态资源，但是实际上是动态的-->
        <!--伪静态作用1：给黑客入侵增加难度-->
        <!--伪静态作用2：有利于SEO优化(让百度、谷歌这样的搜索引擎更让容易找到我们的项目)-->
        <!--缺点：不符合RestFul风格-->
        <url-pattern>*.html</url-pattern>
        <!--如果一个Ajax请求的扩展名是html，但是实际服务器给浏览器返回的是json数据，二者就不匹配了，会出现406的情况-->
        <!--
            状态码：
                200：成功
                302：重定向
                400：和参数有关的错误
                404：资源找不到
                405：方法不允许
                500：内部服务器错误
        -->
        <!--为了让Ajax请求能够顺利拿到JSON合适的响应数据，我们另外配置了json扩展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
</web-app>